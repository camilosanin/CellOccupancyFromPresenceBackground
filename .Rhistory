############################################################################################
##This script reads eBird data for all sampling events and for the species sp
############################################################################################
options(stringsAsFactors = FALSE)
library(raster)
#Set directory and location of all data files
setwd("C:/GitHub/CellOccupancyFromPresenceBackground/")
dataVersFolder="./Data/V1"
try(dir.create(dataVersFolder), silent=T)
altRasterFile="./Data/Basic/alt.grd"    #this raser will be used to define the extent and resulution of study region. Data/NA is also use to restrict sampling events to land
baseRaster=raster(altRasterFile)
basicRasterCRS=CRS("+proj=longlat +datum=WGS84")
#Read all sampling events recoerded on eBird during the breeding season (June 15th to August 15th), limit it to the extent and data of the basic raster and save a csv file#
############################################################################################################################################################################
totalSamEventsFile="~/LargeFilesGitHub/CellOccupancyFromPresenceBackground/SampligDatabase4Columns.csv" #where is the samping event data THIS FILES IS NOT ON GITHUB
#source("./Scripts/cleaneBirdSamplingEvents.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#spSummerEvents = cleaned Spatial data frame with all sampling events, coordinates and date
spSummerEvents=read.csv(paste(dataVersFolder,"/samplingEffort/summerEvents.csv",sep=""), h=T)
spSummerEvents=SpatialPointsDataFrame(coords= spSummerEvents[,c("Longitude","Latitude")], data=spSummerEvents[,c("SamplingEvent","year","month","day")],proj4string= basicRasterCRS)
#Create a sampling effort raster - right now the most basic approach: counting sampling events#
###############################################################################################
#Resulting objects from samplingEffortRasterCount.r:
#SamplingEventsRaster = raster with extent and NAs of base raster and the number of sampling events in each cell
#source("./Scripts/samplingEffortRasterCount.r")
#samplingEffort=SamplingEventsRaster
samplingEffort=raster(paste(dataVersFolder,"/samplingEffort/samplingEffort.grd",sep=""))
##Extract and clean localities where speces sp has been observed##
##################################################################
??dir.create
samplingEffort=raster(paste(dataVersFolder,"/samplingEffort/samplingEffort.grd",sep=""))
##Extract and clean localities where speces sp has been observed##
##################################################################
sp="Oreothlypis_ruficapilla"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
samplingEffort=raster(paste(dataVersFolder,"/samplingEffort/samplingEffort.grd",sep=""))
##Extract and clean localities where speces sp has been observed##
##################################################################
sp="Oreothlypis_ruficapilla"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
saveToFolder=paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sep="")
saveToFolder=paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sep="")
try(dir.create(saveToFolder),silent = T, recursive = T)
try(dir.create(saveToFolder, recursive = T),silent = T)
spRecords=read.delim(totalSamEventsFile, h=T)
head(spRecords)
spRecords=read.delim(rawLocDataFile, h=T)
head(spRecords)
spRecords=spRecords[,c("SAMPLING.EVENT.IDENTIFIER","LONGITUDE","LATITUDE","OBSERVATION.DATE")]
names(spRecords)
spSummerEvents=read.csv(paste(dataVersFolder,"/samplingEffort/summerEvents.csv",sep=""), h=T)
names(spSummerEvents)
spRecords=spRecords[,c("SAMPLING.EVENT.IDENTIFIER","LONGITUDE","LATITUDE","OBSERVATION.DATE")]
names(spRecords)
names(spRecords)=c("SamplingEvent_id","Longitude","Latitude","Date")
dateSampled=do.call(rbind,strsplit(allRecords[,"Date"],'-',fixed=TRUE))
dateSampled=do.call(rbind,strsplit(spRecords[,"Date"],'-',fixed=TRUE))
mode(dateSampled)="numeric"
colnames(dateSampled)=c("year","month","day")
spRecords=cbind(spRecords,dateSampled)
head(spRecords)
#Select summer records (June 15th to August 15th) and limit it to 2000 to 2014 and create a SpatialDataset
summerRecords=which(
spRecords[,"year"]>=2000&(                              #Only years after 2000
(spRecords[,"day"]>=15&spRecords[,"month"]==6)|        #Only after june 15th
(spRecords[,"month"]==7)|                               #Only July
(spRecords[,"day"]<=15&spRecords[,"month"]==8)         #Only before August 15th
) & spRecords[,"day"]!=0                                #No undifined days (0)
)
length(summerRecords)
dim(spRecords)
SpSummerLocs=spRecords[summerRecords,]
length(unique(SpSummerLocs[,"SamplingEvent"]))==dim(SpSummerLocs)[1]    #Are all sampling Events Unique?
length(unique(SpSummerLocs[,"SamplingEvent_id"]))==dim(SpSummerLocs)[1]    #Are all sampling Events Unique?
sum(is.na(SpSummerLocs[,"Latitude"]|is.na(SpSummerLocs[,"Longitude"]))) #Are there any NA coordinates?
SpSummerLocsSp=SpatialPointsDataFrame(coords= SpSummerLocs[,c("Longitude","Latitude")], data=SpSummerLocs[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
plot(SpSummerLocsSp)
#Limit the sampling events to those that fall in the study region (as defined by the basicRaster) lat/long range
locsInExtent=which(
SpSummerLocsSp@coords[,1]>=baseRaster@extent@xmin &
SpSummerLocsSp@coords[,1]<=baseRaster@extent@xmax &
SpSummerLocsSp@coords[,2]>=baseRaster@extent@ymin &
SpSummerLocsSp@coords[,2]<=baseRaster@extent@ymax
)
SpSummerLocsSp=SpSummerLocsSp[locsInExtent,]
#Limit the sampling events to those that fall on land (as no NA) in the study region (as defined by the basicRaster) lat/long range
locsInLand=which(is.na(extract(baseRaster,SpSummerLocsSp))==F)
SpSummerLocsSp=SpSummerLocsSp[locsInLand,]
uniqueLocalities=unique(paste(SpSummerLocsSp@coords[,1],SpSummerLocsSp@coords[,1],sep="_"))
length(SpSummerLocsSp)[1]/length(uniqueLocalities) #On Average, how many times has a locality been sampled?
#Save a csv file with cleaned sampling localities
summerLocsDF
summerLocsDF=data.frame(SpSummerLocsSp)
summerLocsDF[,"optional"]=NULL
summerLocsDF
#####################################################################################################################################
#Read all localities in eBird recorded for species spduring the breeding season (June 15th to August 15th of 2000 on)################
#in the region specified by a basic raster, with unique sampling events then create a .csv file with the cleaned up localities ######
#####################################################################################################################################
###Objects from master###
#sp = focal species for which presences are going to be cleanes
#rawLocDataFile = path to txt (delim) file of all localities for taxon sp
#baseRaster = basic raster in which sampling effort will be estimated
#basicRasterCRS + CRS of the basic raster. Assumed to be the same for sampling events
#dataVersFolder where processed data should be saved
#Read all records and create an individual column for day month and year
saveToFolder=paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs",sep="")
try(dir.create(saveToFolder, recursive = T),silent = T)
spRecords=read.delim(rawLocDataFile, h=T)
spRecords=spRecords[,c("SAMPLING.EVENT.IDENTIFIER","LONGITUDE","LATITUDE","OBSERVATION.DATE")]
names(spRecords)=c("SamplingEvent_id","Longitude","Latitude","Date")
dateSampled=do.call(rbind,strsplit(spRecords[,"Date"],'-',fixed=TRUE))
mode(dateSampled)="numeric"
colnames(dateSampled)=c("year","month","day")
spRecords=cbind(spRecords,dateSampled)
#Select summer records (June 15th to August 15th) and limit it to 2000 to 2014 and create a SpatialDataset
summerRecords=which(
spRecords[,"year"]>=2000&(                              #Only years after 2000
(spRecords[,"day"]>=15&spRecords[,"month"]==6)|        #Only after june 15th
(spRecords[,"month"]==7)|                               #Only July
(spRecords[,"day"]<=15&spRecords[,"month"]==8)         #Only before August 15th
) & spRecords[,"day"]!=0                                #No undifined days (0)
)
SpSummerLocs=spRecords[summerRecords,]
length(unique(SpSummerLocs[,"SamplingEvent_id"]))==dim(SpSummerLocs)[1]    #Are all sampling Events Unique?
sum(is.na(SpSummerLocs[,"Latitude"]|is.na(SpSummerLocs[,"Longitude"]))) #Are there any NA coordinates?
SpSummerLocsSp=SpatialPointsDataFrame(coords= SpSummerLocs[,c("Longitude","Latitude")], data=SpSummerLocs[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
#Limit the sampling events to those that fall in the study region (as defined by the basicRaster) lat/long range
locsInExtent=which(
SpSummerLocsSp@coords[,1]>=baseRaster@extent@xmin &
SpSummerLocsSp@coords[,1]<=baseRaster@extent@xmax &
SpSummerLocsSp@coords[,2]>=baseRaster@extent@ymin &
SpSummerLocsSp@coords[,2]<=baseRaster@extent@ymax
)
SpSummerLocsSp=SpSummerLocsSp[locsInExtent,]
#Limit the sampling events to those that fall on land (as no NA) in the study region (as defined by the basicRaster) lat/long range
locsInLand=which(is.na(extract(baseRaster,SpSummerLocsSp))==F)
SpSummerLocsSp=SpSummerLocsSp[locsInLand,]
uniqueLocalities=unique(paste(SpSummerLocsSp@coords[,1],SpSummerLocsSp@coords[,1],sep="_"))
length(SpSummerLocsSp)[1]/length(uniqueLocalities) #On Average, how many times has a locality been sampled?
#Save a csv file with cleaned sampling localities
summerLocsDF=data.frame(SpSummerLocsSp)
summerLocsDF[,"optional"]=NULL
write.csv(summerLocsDF,paste(saveToFolder,"/",sp,".csv",sep=""),row.names = F)
saveToFolder=paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount",sep="")
try(dir.create(saveToFolder),silent = T)
SpSummerLocsSpJustPoints=SpatialPoints(SpSummerLocsSp)
spRecordsCountRaster=rasterize(SpSummerLocsSpJustPoints, baseRaster, fun="count") #create a raster in which the value of each cell is the number of sampling events in it
spRecordsCountRaster[is.na(spRecordsCountRaster[])]=0
spRecordsCountRaster[is.na(baseRaster[])]=NA
writeRaster(spRecordsCountRaster,pastesaveToFolder,"/",sp,".grd",sep=""))
writeRaster(spRecordsCountRaster,paste(saveToFolder,"/",sp,".grd",sep=""))
plot(spRecordsCountRaster)
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
plot(spRecordsCountRaster)
proportion=spRecordsCountRaster/samplingEffort
plot(proportion)
hist(proportion)
proportion[proportion==0]=NA
proportion[proportion==0]=NA
hist(proportion)
plot(proportion)
hist(proportion)
proportion[proportion<=0.5]=NA
plot(proportion)
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[proportion==0]=NA
proportion[proportion>=0.5]=NA
plot(proportion)
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[proportion==0]=NA
proportion[proportion>=0.2]=NA
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion=spRecordsCountRaster/samplingEffort
proportion[proportion==0]=NA
proportion[proportion>=0.2]=NA
hist(proportion)
plot(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[proportion>=0.5]=NA
plot(proportion)
hist(proportion)
proportion[proportion>=0.1]=NA
hist(proportion)
proportion[proportion==0]=NA
hist(proportion)
plot(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[proportion==1]=NA
proportion[proportion<=0.4]=NA
proportion[proportion==0]=NA
proportion[proportion==0]=NA
plot(proportion)
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
proportion[proportion==0]=NA
proportion[proportion<=0.3]=NA
hist(proportion)
plot(proportion)
proportion=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
proportion[proportion==0]=NA
proportion[proportion<=0.2]=NA
plot(proportion)
proportion=spRecordsCountRaster/samplingEffort
plot(proportion)
hist(proportion)
proportion[proportion==0]=NA
hist(proportion)
proportion[proportion<=0.5]=NA
hist(proportion)
baseRaster
proportion=spRecordsCountRaster/samplingEffort
plot(proportion)
sp="Oreothlypis_peregrina"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/samplingEffort/summerEvents.csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
proportion=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
proportion[proportion==0]=NA
proportion[proportion<=0.5]=NA
hist(proportion)
plot(samplingEffort)
plot(log(samplingEffort))
hist(log(samplingEffort))
hist((samplingEffort))
hist((samplingEffort))
?hist
hist((samplingEffort), xlim = c(0,5)
)
hist((samplingEffort), xlim = c(0,5))
hist((samplingEffort), xlim = c(0,5), breaks=0,5)
hist((samplingEffort), xlim = c(0,5), breaks=0:5)
hist((samplingEffort), xlim = c(0,5), breaks=0:4)
hist((samplingEffort), xlim = c(0,5), breaks=0:6)
hist((samplingEffort), xlim = c(0,5), breaks=0.5)
hist((samplingEffort), xlim = c(0,5), breaks=5)
hist((samplingEffort), xlim = c(0,5), breaks=5000)
hist((samplingEffort), xlim = c(0,5), breaks=50000)
hist((samplingEffort), xlim = c(0,100), breaks=50000)
hist((samplingEffort), xlim = c(0,10), breaks=50000)
hist((samplingEffort), xlim = c(0,100), breaks=10000)
hist((samplingEffort), xlim = c(0,20), breaks=10000)
hist((samplingEffort), xlim = c(0,20), breaks=500000)
hist((samplingEffort), xlim = c(0,10), breaks=500000)
hist((samplingEffort), xlim = c(1,1000), breaks=500000)
hist((samplingEffort), xlim = c(1,1000),ylim = c(1,1000), breaks=500000)
hist((samplingEffort), xlim = c(1,1000),ylim = c(1,400), breaks=500000)
hist((samplingEffort), xlim = c(1,10000),ylim = c(1,100), breaks=50000)
hist((samplingEffort), xlim = c(1,10000),ylim = c(1,100), breaks=5000)
hist((samplingEffort), xlim = c(1,10000),ylim = c(1,100), breaks=500)
hist((samplingEffort), xlim = c(1,10000),ylim = c(1,100), breaks=50)
hist((samplingEffort), xlim = c(1,10000),ylim = c(1,1000), breaks=50)
proportion=spRecordsCountRaster/samplingEffort
plot(proportion)
sp="Oreothlypis_peregrina"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
source("./Scripts/cleaneBirdPresenceLocalities.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/samplingEffort/summerEvents.csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
proportion=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
plot(proportion)
summerLocsDF
head(summerLocsDF)
SpSummerLocsSp
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".csv"), h=T)
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv"), h=T)
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
sp="Oreothlypis_virginiae"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
source("./Scripts/cleaneBirdPresenceLocalities.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
proportion=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
proportion[proportion==0]=NA
proportion[proportion<=0.5]=NA
sp="Oreothlypis_virginiae"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
source("./Scripts/cleaneBirdPresenceLocalities.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
proportion=spRecordsCountRaster/samplingEffort
plot(proportion)
sp="Oreothlypis_ruficapilla"
rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
source("./Scripts/cleaneBirdPresenceLocalities.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
plo=spRecordsCountRaster/samplingEffort
#proportion[proportion==1]=NA
proportion[proportion==0]=NA
proportion[proportion<=0.5]=NA
plo=spRecordsCountRaster/samplingEffort
#proportion[samplingEffort<100]=NA
proportion[samplingEffort<100]=NA
plot(proportion)
proportion[samplingEffort[]<100]=NA
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<100]=NA
plot(proportion)
proportion[proportion==0]=NA
plot(proportion)
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<50]=NA
proportion[proportion==0]=NA
hist(proportion)
proportion[proportion==0]
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<50]=NA
#proportion[proportion==0]=NA
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<10]=NA
proportion[proportion==0]=NA
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<10]=NA
proportion[samplingEffort[]>0.15]=NA
hist(proportion)
proportion=spRecordsCountRaster/samplingEffort
proportion[samplingEffort[]<10]=NA
proportion[proportion[]>0.15]=NA
proportion[proportion==0]=NA
hist(proportion)
proportion[proportion[]>0.1]=NA
hist(proportion)
proportion[proportion[]>0.05]=NA
proportion[proportion[]>0.05]=NA
hist(proportion)
range(proportion)
range(proportion[])
range(proportion[],na.rm=T)
