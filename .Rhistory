message("psy out of bounds")
}
if(p>0.9999){
addLHFactor=addLHFactor+p-0.9999
p=0.9999
message("p out of bounds")
}
if(q>0.9999){
addLHFactor=addLHFactor+q-0.9999
q=0.9999
message("q out of bounds")
}
if(psy<0.0001){
addLHFactor=addLHFactor-psy+0.0001
psy=0.0001
message("psy out of bounds")
}
if(p<0.0001){
addLHFactor=addLHFactor-p+0.0001
p=0.0001
message("p out of bounds")
}
if(q<0.0001){
addLHFactor=addLHFactor-q+0.0001
q=0.0001
message("q out of bounds")
}
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(is.infinite(choose(n=ni,k=yi))){next} #Too large numbers are ignored
likelihoodi=log((choose(n=ni,k=yi)*((psy)*(p^yi)*((1-p)^(ni-yi))))+(choose(n=ni,k=yi)*((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Likelihood function in cell i
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV, na.rm=T)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodV
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT
logBinomialCoeff=ni*H(y1/ni)
logBinomialCoeff=ni*H(yi/ni)
logBinomialCoeff
if(ni>25&ni!=yi)
ni>25&ni!=yi
logBinomialCoeff=log(choose(n=ni,k=yi))
logBinomialCoeff
if(ni>25&ni!=yi){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logBinomialCoeff
likelihoodi=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi
likelihoodV
head(likelihoodV)
likelihoodi=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodT
likelihoodT=sum(likelihoodV,na.rm=T)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT
likelihoodT=sum(likelihoodV,na.rm=T)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
return(likelihoodT)
likelihoodT
likelihoodV
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
likelihoodV
nMax=100
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
return(likelihoodT)
}
likelihoodT
nMax=500
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=1000
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=5000
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=2500
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=1500
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=1000
likelihoodT
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecond=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
logSecondA=log(((psy)*(p^yi)*((1-p)^(ni-yi))))
logSecondA
logSecondAB=log(((1-psy)*(q^yi)*((1-q)^(ni-yi))))) #Log second part of the binomail (i.e. no replacement)
logSecondAB=log(((1-psy)*(q^yi)*((1-q)^(ni-yi)))) #Log second part of the binomail (i.e. no replacement)
logSecondB=log(((1-psy)*(q^yi)*((1-q)^(ni-yi)))) #Log second part of the binomail (i.e. no replacement)
logSecondB
ni
yi
logSecond
logSecond=log(exp(logSecondA)+exp(logSecondB))
logSecond
nMax=1500
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecondA=log(((psy)*(p^yi)*((1-p)^(ni-yi))))
logSecondB=log(((1-psy)*(q^yi)*((1-q)^(ni-yi))))
#Log second part of the binomail (i.e. ordered combinations)
logSecond=log(exp(logSecondA)+exp(logSecondB))
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
return(likelihoodT)
likelihoodT
logSecondA=log(((psy)*(p^yi)*((1-p)^(ni-yi))))
logSecondA
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondA
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondB=log(((1-psy)*(q^yi)*((1-q)^(ni-yi))))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
logSecondB
logSecond=log(exp(logSecondA)+exp(logSecondB))
logSecond
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomail (i.e. ordered combinations)
logSecond=log(exp(logSecondA)+exp(logSecondB))
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
?log1p
source("./Scripts/binaryEntropyFunctionH.r")
source("./Scripts/logxpy.r")
logSecond=logxpy(logSecondA,logSecondB)
logSecond
nMax
##########################################################################################################################################
#Estimate the -log likelihood of the detection across a grid based on rasters of N sampling events and y presence records ################
#psi, p and q are constant across the study region and can only range between 0.0001 and 0.009 and cell are treated as independent  ######
##########################################################################################################################################
###Objects from master###
source("./Scripts/binaryEntropyFunctionH.r")
source("./Scripts/logxpy.r")
likelihoodFunctionConstantPsyPQ=function(N,y,psy,p,q,nMin,nMax){
####These first lines correct and penilize when the paramenters are our of bound.
####This is needed to avoid NA and Inf results in optimizing algorithms.
####Values por Psy, p and q outside 0-1 have no meaning
addLHFactor=0
if(psy>0.9999){
addLHFactor=addLHFactor+psy-0.9999
psy=0.9999
message("psy out of bounds")
}
if(p>0.9999){
addLHFactor=addLHFactor+p-0.9999
p=0.9999
message("p out of bounds")
}
if(q>0.9999){
addLHFactor=addLHFactor+q-0.9999
q=0.9999
message("q out of bounds")
}
if(psy<0.0001){
addLHFactor=addLHFactor-psy+0.0001
psy=0.0001
message("psy out of bounds")
}
if(p<0.0001){
addLHFactor=addLHFactor-p+0.0001
p=0.0001
message("p out of bounds")
}
if(q<0.0001){
addLHFactor=addLHFactor-q+0.0001
q=0.0001
message("q out of bounds")
}
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
#Approximation of the lof of the binomial coefficient - more info in http://math.stackexchange.com/questions/235962/asymptotics-of-binomial-coefficients-and-the-entropy-function
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomial (i.e. ordered combinations)
#logxpy from http://stackoverflow.com/questions/5802592/dealing-with-very-small-numbers-in-r
logSecond=logxpy(logSecondA,logSecondB)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
return(likelihoodT)
}
nMax
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
#Approximation of the lof of the binomial coefficient - more info in http://math.stackexchange.com/questions/235962/asymptotics-of-binomial-coefficients-and-the-entropy-function
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomial (i.e. ordered combinations)
#logxpy from http://stackoverflow.com/questions/5802592/dealing-with-very-small-numbers-in-r
logSecond=logxpy(logSecondA,logSecondB)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
likelihoodT
nMax=20000
whichCellsSampled=which(is.na(N[])==F&N[]!=0&N[]>=nMin&N[]<=nMax) #List the cell numbers that should be used for likelihood stimate (Has been sampled at least nMin but no more than nMax times)
i=912
likelihoodV=vector() #vector in which log likelihoods for all cell will be accumulated
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>25&ni!=yi&yi!=0){
#Approximation of the lof of the binomial coefficient - more info in http://math.stackexchange.com/questions/235962/asymptotics-of-binomial-coefficients-and-the-entropy-function
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomial (i.e. ordered combinations)
#logxpy from http://stackoverflow.com/questions/5802592/dealing-with-very-small-numbers-in-r
logSecond=logxpy(logSecondA,logSecondB)
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV)-addLHFactor #Log likelihood for all the study area (excuding cells with sampling effort outside nMin and nMax). addLHFactor = 0 when psy, p and q take valid values
likelihoodT=likelihoodT*-1 #-log likelihood
nMax
likelihoodT
############################################################################################
##This script reads eBird data for all sampling events and for the species sp
############################################################################################
options(stringsAsFactors = FALSE)
library(raster)
#Set directory and location of all data files
setwd("C:/GitHub/CellOccupancyFromPresenceBackground/")
dataVersFolder="./Data/V1"
try(dir.create(dataVersFolder), silent=T)
altRasterFile="./Data/Basic/alt.grd"    #this raser will be used to define the extent and resulution of study region. Data/NA is also use to restrict sampling events to land
baseRaster=raster(altRasterFile)
basicRasterCRS=CRS("+proj=longlat +datum=WGS84")
#Read all sampling events recoerded on eBird during the breeding season (June 15th to August 15th), limit it to the extent and data of the basic raster and save a csv file#
############################################################################################################################################################################
totalSamEventsFile="~/LargeFilesGitHub/CellOccupancyFromPresenceBackground/SampligDatabase4Columns.csv" #where is the samping event data THIS FILES IS NOT ON GITHUB
#source("./Scripts/cleaneBirdSamplingEvents.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#spSummerEvents = cleaned Spatial data frame with all sampling events, coordinates and date
spSummerEvents=read.csv(paste(dataVersFolder,"/samplingEffort/summerEvents.csv",sep=""), h=T)
spSummerEvents=SpatialPointsDataFrame(coords= spSummerEvents[,c("Longitude","Latitude")], data=spSummerEvents[,c("SamplingEvent","year","month","day")],proj4string= basicRasterCRS)
#Create a sampling effort raster - right now the most basic approach: counting sampling events#
###############################################################################################
#Resulting objects from samplingEffortRasterCount.r:
#SamplingEventsRaster = raster with extent and NAs of base raster and the number of sampling events in each cell
#source("./Scripts/samplingEffortRasterCount.r")
#samplingEffort=SamplingEventsRaster
samplingEffort=raster(paste(dataVersFolder,"/samplingEffort/samplingEffort.grd",sep=""))
##Extract and clean localities where speces sp has been observed##
##################################################################
sp="Oreothlypis_ruficapilla"
#rawLocDataFile=paste("./Data/eBird/Raw_eBird_byTaxon/",sp,".txt",sep="")
#source("./Scripts/cleaneBirdPresenceLocalities.r")
#Resulting objects from cleaneBirdSamplingEvents.r:
#SpSummerLocsSp = cleaned Spatial data frame with all record localities, sampling event id and coordinates and date
#spRecordsCountRaster =  raster with extent and NAs of base raster and the number of sampling events in each cell
summerLocsDF=read.csv(paste(dataVersFolder,"/PresenceLocalities/TotalSummerLocs/",sp,".csv",sep=""), h=T)
SpSummerLocsSp=SpatialPointsDataFrame(coords= summerLocsDF[,c("Longitude","Latitude")], data=summerLocsDF[,c("SamplingEvent_id","year","month","day")],proj4string= basicRasterCRS)
spRecordsCountRaster=raster(paste(dataVersFolder,"/PresenceLocalities/SummerLocalityCount/",sp,".grd",sep=""))
##Likelihood Function across grid cells  for y records given N sampling events #######
##with a costant occupancy (psy), detection (p) and false detection (q) probabilities#
######################################################################################
source("./Scripts/likelihoodFunctionConstantPsyPQ.r") #loads the likelihoodFunctionConstantPsyPQ function
psy=0.5
p=0.5
q=0.5
N=samplingEffort
y=spRecordsCountRaster
nMin=1
nMax=max(N[],na.rm=T)
lfToOptimize=function(psy,p,q)
{
logL=likelihoodFunctionConstantPsyPQ(psy=psy,p=p,q=q,N=samplingEffort,y=spRecordsCountRaster,nMin=1,nMax=max(samplingEffort[],na.rm=T))
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",logL))
return(logL)
}
lfToOptimize(psy = 1, p=1,q=0)
library(bbmle)
mleTry=mle2(minuslogl=lfToOptimize, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.00001, p = 0.00001,q = 0.00001),upper = c(psy = 0.99999, p = 0.99999,q = 0.99999))
mleTry
psy=mleTry@coef["psy"]
p=mleTry@coef["p"]
q=mleTry@coef["q"]
N=samplingEffort
y=spRecordsCountRaster
nMin=1
nMax=max(N[],na.rm = T)
ppRaster=posteriorOccProbabilityConstantPsyPQRaster(N,y,psy,p,q,nMin,nMax)
plot(ppRaster)
source("./Scripts/posteriorOccProbabilityConstantPsyPQRaster.r") #loads the posteriorOccProbabilityConstantPsyPQRaster  function
#psy=0.0754081
#p=0.2697834
#q=0.0018690
psy=mleTry@coef["psy"]
p=mleTry@coef["p"]
q=mleTry@coef["q"]
N=samplingEffort
y=spRecordsCountRaster
nMin=1
nMax=max(N[],na.rm = T)
ppRaster=posteriorOccProbabilityConstantPsyPQRaster(N,y,psy,p,q,nMin,nMax)
plot(ppRaster)
psy=0.0754081
p=0.2697834
q=0.0018690
logL=likelihoodFunctionConstantPsyPQ(psy=psy,p=p,q=q,N=samplingEffort,y=spRecordsCountRaster,nMin=1,nMax=100)
logL
