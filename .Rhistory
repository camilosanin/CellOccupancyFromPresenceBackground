n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
n  = 0
n3 = 0
n5 = 0
for(i in 1:100){
n  = n+1
n3 = n3+1
n5 = n5+1
out=n
if (n3 == 3){
out = "Crackle"
n3 = 0
}
if (n5 == 5){
out = "Pop"
n5 = 0
}
if (n3 == 0 & n5 == 0){
out="CracklePop"
}
print(out)
}
?mud
??mud
############################################################################################
##This script reads eBird data for all sampling events and for the species sp
############################################################################################
options(stringsAsFactors = FALSE)
library(raster)
#Set directory and location of all data files
setwd("C:/GitHub/CellOccupancyFromPresenceBackground/")
dataVersFolder="./Data/V1"
try(dir.create(dataVersFolder), silent=T)
altRasterFile="./Data/Basic/alt.grd"    #
altRasterFile
baseRaster=raster(altRasterFile)
baseRaster
baseRaster = raster(nrows=d,ncols=d)
d = 50
psy = 0.35
smean = 0
ssdev = 2
p = 0.25
q = 0.01
baseRaster = raster(nrows=d,ncols=d)
baseRaster
baseRaster = raster(nrows=d,ncols=d, xmin=0,xmax=100,ymin=0,xmax=100)
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,xmx=100)
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
baseRaster
trueOcc = baseRaster
sample(c(0,1),size = d^2,replace = T, prob = (1-psy,psy))
sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))=
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))=
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
sum(sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)))/d^2
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
plot(trueOcc)
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
plot(trueOcc)
rnorm(10, mean = smean, sd = ssdev)
rnorm(10, mean = smean, sd = ssdev)
exp(rnorm(10, mean = smean, sd = ssdev))
round(exp(rnorm(10, mean = smean, sd = ssdev)))
round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
samplingEffort
plot(samplingEffort)
ssdev = 1
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
samplingEffort
plot(samplingEffort)
ssdev = 2
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
plot(samplingEffort)
p = 0.55
##Create raster of true detections (with p detection probablility)
i=1
samplingEffort[i]
i=10
samplingEffort[i]
runif(20)
runif(20)
runif(samplingEffort[i])
runif(samplingEffort[i])<=p
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
samplingEffort[i]
sum(runif(samplingEffort[i])<=p)
samplingEffort[i]
runif(samplingEffort[i])
runif(samplingEffort[i])<=p
runif(samplingEffort[i])<=p
runif(samplingEffort[i])<=p
runif(samplingEffort[i])<=p
i=0
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
sum(c(0,runif(samplingEffort[i])<=p))
sum(c(0,runif(samplingEffort[i])<=p),na.rm = T)
samplingEffort[i]
samplingEffort[i]
samplingEffort[i]
i=1
samplingEffort[i]
runif(samplingEffort[i])
runif(samplingEffort[i])<=p
sum(c(0,runif(samplingEffort[i])<=p),na.rm = T)
sum(runif(samplingEffort[i])<=p)
sum(runif(samplingEffort[i])<=p)
trueDetections = baseRaster
trueDetections[i] = sum(runif(samplingEffort[i])<=p)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p)
}
plottrueDetections
plot(trueDetections)
trueDetections/samplingEffort
plot(trueDetections/samplingEffort)
prop=trueDetections/samplingEffort
mean(prop[],na.rm)
mean(prop[],na.rm=T)
p
trueDetections = trueDetections * trueOcc
plot(trueDetections)
plot(trueDetections/samplingEffort)
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of detections if all cells sampled are occupied
falseDetections = trueDetections * (1-trueOcc)
}
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
prop=trueDetections/samplingEffort
mean(prop[],na.rm=T)
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
prop=falseDetections/samplingEffort
mean(prop[],na.rm=T)
plot(falseDetections)
falseDetections = falseDetections * (1-trueOcc)
plot(falseDetections)
###Input variables###
# d = numbers of row and columns of the simulated raster
# psy - proportion of occupied cells
# smean and ssdev - mean and stardard deviation of the log of sampling effort
# p - detectavility to simmulate
# q - proportion of false dectections in unoccupied cells
d = 20
psy = 0.35
smean = 0
ssdev = 2
p = 0.25
q = 0.01
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
source("./Scripts/likelihoodFunctionConstantPsyPQ.r") #loads the likelihoodFunctionConstantPsyPQ function
source("./Scripts/likelihoodFunctionConstantPsyPQ.r") #loads the likelihoodFunctionConstantPsyPQ function
psy=0.5
p=0.5
q=0.5
N=samplingEffort
y=spRecordsCountRaster
nMin=1
nMax=max(N[],na.rm=T)
lfToOptimize=function(psy,p,q)
{
logL=likelihoodFunctionConstantPsyPQ(psy=psy,p=p,q=q,N=samplingEffort,y=totalDetections,nMin=1,nMax=100000)
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",logL))
return(logL)
}
lfToOptimize(psy = 1, p=1,q=0)
library(bbmle)
mleTry=mle2(minuslogl=lfToOptimize, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.00001, p = 0.00001,q = 0.00001),upper = c(psy = 0.99999, p = 0.99999,q = 0.99999))
d = 50
psy = 0.35
smean = 0
ssdev = 2
p = 0.55
q = 0.01
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
lfToOptimize=function(psy,p,q)
{
logL=likelihoodFunctionConstantPsyPQ(psy=psy,p=p,q=q,N=samplingEffort,y=totalDetections,nMin=1,nMax=100000)
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",logL))
return(logL)
}
lfToOptimize(psy = 1, p=1,q=0)
library(bbmle)
mleTry=mle2(minuslogl=lfToOptimize, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.00001, p = 0.00001,q = 0.00001),upper = c(psy = 0.99999, p = 0.99999,q = 0.99999))
plot(trueOcc)
sum(trueOcc[])/d^2
plot(samplingEffort)
###Input variables###
# d = numbers of row and columns of the simulated raster
# psy - proportion of occupied cells
# smean and ssdev - mean and stardard deviation of the log of sampling effort
# p - detectavility to simmulate
# q - proportion of false dectections in unoccupied cells
d = 50
psy = 0.35
smean = 0
ssdev = 2
p = 0.25
q = 0.01
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
lfToOptimize=function(psy,p,q)
{
logL=likelihoodFunctionConstantPsyPQ(psy=psy,p=p,q=q,N=samplingEffort,y=totalDetections,nMin=1,nMax=100000)
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",logL))
return(logL)
}
lfToOptimize(psy = 1, p=1,q=0)
library(bbmle)
mleTry=mle2(minuslogl=lfToOptimize, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.00001, p = 0.00001,q = 0.00001),upper = c(psy = 0.99999, p = 0.99999,q = 0.99999))
