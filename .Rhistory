samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
d=200
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
psy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/sum(is.na(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])==F)
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
finalStack[["trueOcc"]][]
finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0]
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])
sampledPsy
smean=5
d=100
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
psy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/sum(is.na(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])==F)
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])
length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])
finalStack[["samplingEffort"]][]>0
sum(finalStack[["samplingEffort"]][]>0)
smean=90
ssdev=0.1
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
psy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/sum(is.na(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])==F)
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
smean=9
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
psy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/sum(is.na(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])==F)
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
sum(finalStack[["samplingEffort"]][]==0)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])
sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]>0])
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
sampledPsy
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
sum(finalStack[["samplingEffort"]][]0)
sampledPsy
sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
sum(finalStack[["trueOcc"]][])
sum(is.na(finalStack[["trueOcc"]][])==F)
length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
psy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
psy
sampledPsy
psy
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
return(finalStack)
psy
psy=10
smean=0
ssmean=3
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
return(finalStack)
ssdev=3
smean=0
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
return(finalStack)
psy
psy=0.1
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##Create raster of true occurrences
trueOcc = baseRaster
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy)) #Occurrence is simulated
##Create raster of sampling effort
samplingEffort = baseRaster
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
trueDetections[i] = sum(runif(samplingEffort[i])<=p) #Number of detections if all cells sampled are occupied
}
trueDetections = trueDetections * trueOcc #True detections only in cells that are occupied
##Create raster of false detections (with q detection probablility in occupied cells that are not occupied)
falseDetections = baseRaster
for(i in 1:d^2){
falseDetections[i] = sum(runif(samplingEffort[i])<=q) #Number of false detections if all cells sampled are not occupied
}
falseDetections = falseDetections * (1-trueOcc) #False detections only in cells that are not occupied
totalDetections = trueDetections + falseDetections
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
return(finalStack)
##Create a simulated dataset
#The species is present in 30% of the study area. It is detected only 45% of the times an occupied cell is sampled, and in cell where the species is not preset, 1% of the times is falsely reported
simData=simulateConstantPsyPR(d=25,psy=0.30,p=0.45,q=0.01, smean=1, ssdev=1.5)
###Likelihood function
##Accessory functions
#Create two functions that will be used later to calculate the approximations to very large or very small numbers
#Calculate the Binary Entropy Function H()
H=function(x){
y=(-x*log(x))-((1-x)*log(1-x))
return(y)
}
#Approximate log of the sum of x and y when the input is logx and logy
logxpy = function(lx,ly){
max(lx,ly) + log1p(exp(-abs(lx-ly)))
}
#Calculate the likelihood of the simulated data (N is samplingEffort and y is totalDetections (observed records)) for a given psy, p and q.
likelihoodFunctionConstantPsyPQ=function(psy,p,q){
#define N as samplingEffort and y as totalDetections (observed records)
N=simData[["samplingEffort"]]
y=simData[["totalDetections"]]
#List the cell numbers that should be used for likelihood estimate (Have been sampled at least once)
whichCellsSampled=which(is.na(N[])==F&N[]!=0)
#vector in which log likelihoods for all cells will be accumulated
likelihoodV=vector()
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>10&ni!=yi&yi!=0){
#Approximation of the of the binomial coefficient, only to be used when more than 10 sampling events happened and at least 1 detection was made
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
#Log of the probability of detection if the species is present (psy) but not perfectly detected (detected with p frequency)
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
#Log of the probability of detection if the species is not present (1-psy) and a portion of observations are false negatives (q)
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomial (i.e. ordered combinations) adding the above probabilities
logSecond=logxpy(logSecondA,logSecondB)
#Total likelihood of the cell that is then added to the vector in which cells log-likelihoods accumulate
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV) #Log likelihood for all the study area (excluding cells not sampled).
likelihoodT=likelihoodT*-1 #-log likelihood (for ML optimization)
#to keep track during the ML optimization
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",likelihoodT))
return(likelihoodT)
}
##Likelihood maximization and posterior probability contrast
#Optimize parameters to maximize likelihood of simulated data
mleSimDat=mle(minuslogl=likelihoodFunctionConstantPsyPQ, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.0001, p = 0.0001,q = 0.0001),upper = c(psy = 0.9999, p = 0.9999,q = 0.9999))
}
#Simulated occupancy in a study region in which detectability of a species and probability of misidentification is constant across the landscape
##Simulated Study Region
#This script simulates a study region ("d" rows by "d" columns) in which occupancy by a species is known (based on "psy").
#Sampling effort is simulated following a lognormal distribution of sampling events and instances of detection are simulated
#based on the species detectability (p) and the probability of a false detection (q) which are constant across the study region.
##Likelihood function
#A likelihood function for the simulated data, given a set of parameters, is then calculated. Importantly, multiple approximations to
#the estimated values of probability are estimated in the log scale in order to allow calculations of very small and very large numbers
##Likelihood maximization and posterior probability contrast
#Psy, p and q are estimated by maximum likelihood of the simulated data. And the posterior probability of presence is estimated for cells
#in which at least one sampling event was simulated. This is contrasted to the "known" occurrences. Predictability of occurrence/not occurrence is
#plotted in function of sampling effort.
###Simulated Study Region
###Input variables###
# d = numbers of row and columns of the simulated raster
# psy - proportion of occupied cells
# smean and ssdev - mean and standard deviation of the log of sampling effort
# p - detectability to simulate
# q - proportion of false detections in unoccupied cells
#Load raster package
library(raster)
simulateConstantPsyPR=function(d,psy,smean,ssdev,p,q){
#Basic raster of the study region with d rows and d columns
baseRaster = raster(nrows=d,ncols=d, xmn=0,xmx=100,ymn=0,ymx=100)
##True occurence raster
#Create raster of true occurrences
trueOcc = baseRaster
#Occurrences (1) and no-occurrences are assigned to cells with psy probability of occurrence, and (1-psy) probability of not occurrence
trueOcc[] = sample(c(0,1),size = d^2,replace = T, prob = c(1-psy,psy))
##Sampling effort raster
#Create raster of sampling effort
samplingEffort = baseRaster
#The number of sampling events for each cell is assigned as an integer following a log-normal distribution with log(mean)=sman and log(sd)=ssdev
samplingEffort[] = round(exp(rnorm(d^2, mean = smean, sd = ssdev)))
##True detections raster
#Create raster of true detections (with p detection probablility in occupied cells)
trueDetections = baseRaster
for(i in 1:d^2){
#Number of detections if all cells sampled are occupied and the probability of detection is p
trueDetections[i] = sum(runif(samplingEffort[i])<=p)
}
#True detections only in cells that are occupied
trueDetections = trueDetections * trueOcc
##False detections raster
#Create raster of false detections (i.e. the species is wrongly reported) with q detection probability cells that are not occupied
falseDetections = baseRaster
for(i in 1:d^2){
#Number of false detections if all cells sampled are not occupied and the probability of false detection is q
falseDetections[i] = sum(runif(samplingEffort[i])<=q)
}
#False detections only in cells that are not occupied
falseDetections = falseDetections * (1-trueOcc)
##Total detections raster (The sum of false and true detections. I real life these are often not discernible)
totalDetections = trueDetections + falseDetections
##Object in which all rasters are combined
finalStack=stack(trueOcc,samplingEffort,trueDetections,falseDetections,totalDetections)
names(finalStack)=c("trueOcc","samplingEffort","trueDetections","falseDetections","totalDetections")
#Summary Statistics of the simmulated data -  The acutual psy, The sampled psy p and q
truePsy=sum(finalStack[["trueOcc"]][])/sum(is.na(finalStack[["trueOcc"]][])==F)
sampledPsy=sum(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])/length(finalStack[["trueOcc"]][finalStack[["samplingEffort"]][]!=0])
trueP=sum(finalStack[["trueDetections"]][finalStack[["trueOcc"]][]==1])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==1])
trueQ=sum(finalStack[["falseDetections"]][finalStack[["trueOcc"]][]==0])/sum(finalStack[["samplingEffort"]][finalStack[["trueOcc"]][]==0])
message(paste("True psy =",truePsy,"- Sampled psy =",sampledPsy, "- True p =",trueP,"- True q =",trueQ))
return(finalStack)
}
##Create a simulated dataset
#The species is present in 30% of the study area. It is detected only 45% of the times an occupied cell is sampled, and in cell where the species is not preset, 1% of the times is falsely reported
simData=simulateConstantPsyPR(d=25,psy=0.30,p=0.45,q=0.01, smean=1, ssdev=1.5)
###Likelihood function
##Accessory functions
#Create two functions that will be used later to calculate the approximations to very large or very small numbers
#Calculate the Binary Entropy Function H()
H=function(x){
y=(-x*log(x))-((1-x)*log(1-x))
return(y)
}
#Approximate log of the sum of x and y when the input is logx and logy
logxpy = function(lx,ly){
max(lx,ly) + log1p(exp(-abs(lx-ly)))
}
#Calculate the likelihood of the simulated data (N is samplingEffort and y is totalDetections (observed records)) for a given psy, p and q.
likelihoodFunctionConstantPsyPQ=function(psy,p,q){
#define N as samplingEffort and y as totalDetections (observed records)
N=simData[["samplingEffort"]]
y=simData[["totalDetections"]]
#List the cell numbers that should be used for likelihood estimate (Have been sampled at least once)
whichCellsSampled=which(is.na(N[])==F&N[]!=0)
#vector in which log likelihoods for all cells will be accumulated
likelihoodV=vector()
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detection in cell i
if(ni>10&ni!=yi&yi!=0){
#Approximation of the of the binomial coefficient, only to be used when more than 10 sampling events happened and at least 1 detection was made
logBinomialCoeff=ni*H(yi/ni)
}else{
logBinomialCoeff=log(choose(n=ni,k=yi))
}
#Log of the probability of detection if the species is present (psy) but not perfectly detected (detected with p frequency)
logSecondA=log(psy)+(log(p)*yi)+(log(1-p)*(ni-yi))
#Log of the probability of detection if the species is not present (1-psy) and a portion of observations are false negatives (q)
logSecondB=log(1-psy)+(log(q)*yi)+(log(1-q)*(ni-yi))
#Log second part of the binomial (i.e. ordered combinations) adding the above probabilities
logSecond=logxpy(logSecondA,logSecondB)
#Total likelihood of the cell that is then added to the vector in which cells log-likelihoods accumulate
likelihoodi=logBinomialCoeff+logSecond
likelihoodV=c(likelihoodV,likelihoodi)
}
likelihoodT=sum(likelihoodV) #Log likelihood for all the study area (excluding cells not sampled).
likelihoodT=likelihoodT*-1 #-log likelihood (for ML optimization)
#to keep track during the ML optimization
message(paste("psy =",psy,"- p =",p,"- q =",q,"- -LogL =",likelihoodT))
return(likelihoodT)
}
##Likelihood maximization and posterior probability contrast
#Optimize parameters to maximize likelihood of simulated data
mleSimDat=mle(minuslogl=likelihoodFunctionConstantPsyPQ, start = list(psy = 0.5, p=0.5,q=0.1), method="L-BFGS-B", lower = c(psy = 0.0001, p = 0.0001,q = 0.0001),upper = c(psy = 0.9999, p = 0.9999,q = 0.9999))
#Creates a posterior probability raster of occurrence based on a set of psy, p and q parameters and  Sampling effort and detection rasters
posteriorOccProbabilityConstantPsyPQRaster=function(N,y,psy,p,q){
whichCellsSampled=which(is.na(N[])==F&N[]!=0) #List the cell numbers that should be used
psyPp=N #Raster in which the posterior probabilities will be gathered
psyPp[]=NA
for (i in whichCellsSampled){
ni=N[i]  #Sampling events in cell i
yi=y[i]  #detections in cell i
#posterior probability function derived using Bayes theorem
numerator=log((((psy)*(p^yi)*((1-p)^(ni-yi)))))
denominator=log(((psy)*(p^yi)*((1-p)^(ni-yi)))+(((1-psy)*(q^yi)*((1-q)^(ni-yi)))))
spyPpi=exp(numerator-denominator)
psyPp[i]=spyPpi
}
return(psyPp)
}
#Create raster of the posterior probabilities of presence based on the simulated data and the parameters recovered through ML
ppRaster=posteriorOccProbabilityConstantPsyPQRaster(N=simData[["samplingEffort"]], simData[["totalDetections"]],psy=mleSimDat@coef["psy"],p=mleSimDat@coef["p"],q=mleSimDat@coef["q"] )
##Plot Results
#Create raster of areas not sampled
notSampledRaster=simData[["samplingEffort"]]
notSampledRaster[notSampledRaster[]!=0]=NA
#Separate the raster of probability of presence by the "real" presence or absence
ppRasterOcurrences=ppRaster
#Probability of presence with NA in cell in which the species does not occur
ppRasterOcurrences[simData[["trueOcc"]]==0]=NA
ppRasterNotOcurrences=ppRaster
#Probability of presence with NA in cell in which the species occurs
ppRasterNotOcurrences[simData[["trueOcc"]]==1]=NA
#All data are transformed in a dataframe for easier handling/plotting
allData=data.frame(simData[],presenceProbability=ppRaster[])
#Data organized by number of sampling events
allData=allData[order(allData[,"samplingEffort"]),]
#Create a new dataframe in which the sampling effort will be compared to the prob of presence
#First column is all possibilities of sampling effort in the range simulated (Second column will be filled out below)
EffortVsPP= data.frame(samplingEvents=1:max(allData[,"samplingEffort"]),Mean=0)
#Only values that were actually sampled are kept
EffortVsPP=EffortVsPP[EffortVsPP[,"samplingEvents"]%in%allData[,"samplingEffort"],]
#For each value of sampling effort, the mean probability of presence is estimated for cell that are occupied and not occupied
for(i in 1:dim(EffortVsPP)[1]){
EffortVsPP[i,"PPOccurr"]=mean(allData[allData[,"samplingEffort"]==EffortVsPP[i,"samplingEvents"]&allData[,"trueOcc"]==1,"presenceProbability"],na.rm=T)
EffortVsPP[i,"PPNotOccurr"]=mean(allData[allData[,"samplingEffort"]==EffortVsPP[i,"samplingEvents"]&allData[,"trueOcc"]==0,"presenceProbability"],na.rm=T)
}
#The raster of posterior probabilities of presence and the plot of sampling effort vs. presence probability will be plotted in the same graph
LayOutMatrix=matrix(nrow=2,ncol=2,data=c(1,2,3,3),byrow=T)
nf=layout(mat=LayOutMatrix)
#No Margins for the rasters plots
par(mar=c(0,0,0,0))
image(simData[["trueOcc"]], col=c("darkred","darkblue"),asp=1, xaxt="n", yaxt="n")
#Raster of posterior probabilities - Not sampled areas will be shown in black Areas occupied will be shown in blue and not occupied in red. Test accuracy will vary with the tone of these colors, with a dominance in bright colors representing a good model
#Not sampled areas are plotted black
image(notSampledRaster, col="black", asp=1, xaxt="n", yaxt="n")
#Occupied areas are sampled from light blue (low probability of occurrence - wrong inference) to darkblue (high occurrence probability)
image(ppRasterOcurrences, col=colorRampPalette(c("slategray1", "navyblue"))(255),asp=1, add=T, asp=1, xaxt="n", yaxt="n")
#Not occupied cells are plotted from light red (high probability of occurrence - wrong inference ) to dark red (low occurrence probability)
image(ppRasterNotOcurrences, col=colorRampPalette(c("darkred","mistyrose"))(255),asp=1, add=T ,asp=1, xaxt="n", yaxt="n")
# Mergins for plot (so axes and labels are displayed)
par(mar=c(4,4,0.5,0.5))
#Empty plot with x log transformed and ranging from 1 to the maximum number of sampling events
plot(x=1, y=1, xlim=c(1,max(simData[["samplingEffort"]][])), ylim=c(0,1), type="n", log="x", xlab="Sampling events", ylab="Probability of presence")
#Line connecting the average probability of presence for a given number of sampling events in cell where the species occur
lines(x=EffortVsPP[is.na(EffortVsPP[,"PPOccurr"])==F,"samplingEvents"],y=EffortVsPP[is.na(EffortVsPP[,"PPOccurr"])==F,"PPOccurr"],lwd=2, col="darkblue")
#Sampling effort and probability of presence for each cell
points(x=allData[allData[,"trueOcc"]==1,"samplingEffort"],y=allData[allData[,"trueOcc"]==1,"presenceProbability"],cex=0.75,pch=16,col="#00007030")
#Line connecting the average probability of presence for a given number of sampling events in cell where the species does not occur
lines(x=EffortVsPP[is.na(EffortVsPP[,"PPNotOccurr"])==F,"samplingEvents"],y=EffortVsPP[is.na(EffortVsPP[,"PPNotOccurr"])==F,"PPNotOccurr"],lwd=2, col="darkred")
#Sampling effort and probability of presence for each cell
points(x=allData[allData[,"trueOcc"]==0,"samplingEffort"],y=allData[allData[,"trueOcc"]==0,"presenceProbability"],cex=0.75,pch=16,col="#70000030")
